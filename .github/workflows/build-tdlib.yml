name: Build TDLib for amd64 / arm64 / armhf

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # 64-bit x86 – GitHub-hosted
          - arch: amd64
            runs_on: ubuntu-latest
            platform: linux/amd64      # still useful for docker
          # 64-bit ARM – GitHub-hosted (preview) or your own
          - arch: arm64
            runs_on: ubuntu-24.04-arm64   # or ubuntu-22.04-arm64, or ["self-hosted","ARM64"]
            platform: linux/arm64
          # 32-bit ARM/v7 – **self-hosted** only
          - arch: armhf
            runs_on: ubuntu-24.04-arm
            platform: linux/arm

    # Pick the runner declared in the matrix line above
    runs-on: ${{ matrix.runs_on }}

    steps:
      #######################################################################
      # 1) Check out your code
      #######################################################################
      - uses: actions/checkout@v4

      #######################################################################
      # 2) Build TDLib inside an Ubuntu 24.04 container that matches
      #    the native CPU.  No QEMU needed because host == target.
      #######################################################################
      - name: Build TDLib (${{ matrix.arch }})
        run: |
          docker run --rm --platform ${{ matrix.platform }} \
            -v "$PWD":/work -w /work ubuntu:24.04 /bin/bash -euxc "
              apt-get update
              DEBIAN_FRONTEND=noninteractive apt-get upgrade -y
              apt-get install -y \
                make git zlib1g-dev libssl-dev gperf php-cli \
                cmake clang-18 libc++-18-dev libc++abi-18-dev

              git clone --depth 1 https://github.com/tdlib/td.git
              cd td
              rm -rf build
              mkdir build && cd build

              CXXFLAGS=\"-stdlib=libc++\" CC=/usr/bin/clang-18 CXX=/usr/bin/clang++-18 \
                cmake -DCMAKE_BUILD_TYPE=Release \
                      -DCMAKE_INSTALL_PREFIX:PATH=../tdlib \
                      ..

              cmake --build . --target install -j $(nproc)
            "

      #######################################################################
      # 3) Upload the freshly-built libtdjson for each architecture
      #######################################################################
      - name: Upload libtdjson (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: libtdjson-${{ matrix.arch }}
          path: td/tdlib/lib/libtdjson.so*
