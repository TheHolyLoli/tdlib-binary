name: Build TDLib for amd64 / arm64 / armhf

on:
  push:
    branches: [main]        # adjust as needed
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            toolchain: ""
          - arch: arm64
            toolchain: .github/toolchains/arm64.cmake
          - arch: armhf
            toolchain: .github/toolchains/armhf.cmake

    steps:
            
      # -------------------------------------------------------
      # A. set up repos **only for cross jobs**
      # -------------------------------------------------------
      - name: Rewrite APT sources for ARM jobs
        if: matrix.arch != 'amd64'          # run only for arm64 / armhf
        shell: bash
        run: |
          set -eux

          # 1) Enable the foreign architecture weâ€™re about to build
          sudo dpkg --add-architecture ${{ matrix.deb_arch }}
      
          # 2) Comment-out every security.ubuntu.com line
          sudo find /etc/apt -type f -name '*.list' -exec \
               sed -Ei '/security\.ubuntu\.com/ s/^/#/' {} +
      
          # 3) Tell archive.ubuntu.com to serve *only* amd64
          sudo sed -Ei 's|^deb (.*archive\.ubuntu\.com.*)$|deb [arch=amd64] \1|' /etc/apt/sources.list || true
          sudo find /etc/apt/sources.list.d -name '*.list' -exec \
               sed -Ei 's|^deb (.*archive\.ubuntu\.com.*)$|deb [arch=amd64] \1|' {} +
      
          # 4) Add ports.ubuntu.com lines for this ARM arch (main + updates + security)
          sudo tee /etc/apt/sources.list.d/ports-${{ matrix.deb_arch }}.list >/dev/null <<EOF
          deb [arch=${{ matrix.deb_arch }}] http://ports.ubuntu.com/ubuntu-ports noble main restricted universe multiverse
          deb [arch=${{ matrix.deb_arch }}] http://ports.ubuntu.com/ubuntu-ports noble-updates main restricted universe multiverse
          deb [arch=${{ matrix.deb_arch }}] http://ports.ubuntu.com/ubuntu-ports noble-security main restricted universe multiverse
          EOF
      
          # 5) Refresh package indexes â€” now APT talks only to archive (amd64) + ports (ARM)
          sudo apt-get update -o Acquire::Retries=3
      
      # -------------------------------------------------------
      # B. install the right dev packages per job
      # -------------------------------------------------------
      - name: Install build dependencies
        shell: bash
        run: |
          common_pkgs="make git gperf php-cli cmake g++ zlib1g-dev libssl-dev"
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            sudo apt-get install -y $common_pkgs                      # amd64 only
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y $common_pkgs \
              gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
              zlib1g-dev:arm64 libssl-dev:arm64
          else
            sudo apt-get install -y $common_pkgs \
              gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
              zlib1g-dev:armhf libssl-dev:armhf
          fi
          git clone --depth 1 https://github.com/tdlib/td.git
          mkdir -p td/build && cd td/build
      
      # -------------------------------------------------------
      # C. run cross-prep steps only when cross-compiling
      # -------------------------------------------------------
      - name: Prepare cross-compiling
        if: matrix.arch != ''
        shell: bash
        run: |
          cmake --build . --target prepare_cross_compiling




      - name: Configure & build (${{ matrix.arch }})
        run: |
          CMAKE_EXTRA=""
          if [ -n "${{ matrix.toolchain }}" ]; then
            CMAKE_EXTRA="-DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/${{ matrix.toolchain }}"
          fi

          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../tdlib .. \
            ${CMAKE_EXTRA}
            
          cmake --build . --target prepare_cross_compiling

          cmake --build . --target install


      #######################################################################
      # 4) Upload the freshly-built library (td/tdlib) so every PR and
      #    branch push has downloadable artefacts per architecture.
      #######################################################################
      - name: Upload libtdjson (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          # ðŸ‘‡ any name you like
          name: libtdjson-${{ matrix.arch }}
          # ðŸ‘‡ pick only the .so file, whatever its version suffix is
          path: td/tdlib/lib/libtdjson.so*
