name: Build TDLib for amd64 / arm64 / armhf

on:
  push:
    branches: [main]        # adjust as needed
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            toolchain: ""
          - arch: arm64
            toolchain: .github/toolchains/arm64.cmake
          - arch: armhf
            toolchain: .github/toolchains/armhf.cmake

    steps:
      - uses: actions/checkout@v4

      - name: Install build deps + cross compilers
        run: |
          sudo dpkg --add-architecture arm64
          sudo dpkg --add-architecture armhf
          # 2) Tell the default mirrors to serve *only* amd64
          sudo sed -Ei 's|^deb (.+)$|deb [arch=amd64] \1|' /etc/apt/sources.list
          
          # 3) Add a new list for arm64 + armhf that points to Ubuntu-Ports
          sudo tee /etc/apt/sources.list.d/ubuntu-ports.list >/dev/null <<'EOF'
          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports noble main restricted universe multiverse
          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports noble-updates main restricted universe multiverse
          deb [arch=arm64,armhf] http://ports.ubuntu.com/ubuntu-ports noble-security main restricted universe multiverse
          EOF
          sudo apt-get update
          
          sudo apt-get install -y \
            make git gperf php-cli cmake g++ \
            # native (amd64) dev libraries
            zlib1g-dev   libssl-dev \
            # arm64 dev libraries
            gcc-aarch64-linux-gnu  g++-aarch64-linux-gnu \
            zlib1g-dev:arm64       libssl-dev:arm64 \
            # armhf dev libraries
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            zlib1g-dev:armhf        libssl-dev:armhf



      - name: Configure & build (${{ matrix.arch }})
        run: |
          git clone --depth 1 https://github.com/tdlib/td.git
          mkdir -p td/build && cd td/build

          CMAKE_EXTRA=""
          if [ -n "${{ matrix.toolchain }}" ]; then
            CMAKE_EXTRA="-DCMAKE_TOOLCHAIN_FILE=${GITHUB_WORKSPACE}/${{ matrix.toolchain }}"
          fi

          cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=../tdlib .. \
            ${CMAKE_EXTRA}
            
          cmake --build . --target prepare_cross_compiling

          cmake --build . --target install


      #######################################################################
      # 4) Upload the freshly-built library (td/tdlib) so every PR and
      #    branch push has downloadable artefacts per architecture.
      #######################################################################
      - name: Upload libtdjson (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          # ðŸ‘‡ any name you like
          name: libtdjson-${{ matrix.arch }}
          # ðŸ‘‡ pick only the .so file, whatever its version suffix is
          path: td/tdlib/lib/libtdjson.so*
